drop table if exists compilations_events, compilations, categories, users, locations, events, requests;

create table if not exists categories
(
    id        bigint generated by default as identity not null,
    name       varchar(50)                            not null,
    constraint pk_category primary key (id),
    constraint uq_category_name unique (name)
);

create table if not exists users
(
    id    bigint generated by default as identity not null,
    name  varchar(255)                            not null,
    email varchar(255)                            not null,
    constraint pk_user primary key (id),
    constraint uq_user_email unique (email)
);

create table if not exists events
(
    id    bigint generated by default as identity not null,
    title varchar(120) not null,
    annotation varchar(2000) not null,
    category_id bigint not null,
    description varchar(7000) not null,
    confirmed_requests int,
    created_on timestamp not null,
    published_on timestamp,
    event_date timestamp not null,
    initiator_id bigint not null,
    lat float,
    lon float,
    paid boolean,
    participant_limit int,
    request_moderation boolean,
    state varchar(20) not null,
    views int,
    constraint pk_event primary key (id),
    constraint fk_event_initiator foreign key (initiator_id) references users (id),
    constraint fk_event_category foreign key (category_id) references categories (id)

);

create table if not exists requests
(
    id    bigint generated by default as identity not null,
    event_id bigint not null,
    requester_id bigint not null,
    status varchar(20) not null,
    created timestamp not null,
    constraint pk_request primary key (id),
    constraint fk_request_requester foreign key (requester_id) references users (id),
    constraint fl_request_event foreign key (event_id) references events (id)
);

create table if not exists compilations
(
    id    bigint generated by default as identity not null,
    pinned boolean,
    title varchar(50),
    constraint pk_compilation primary key (id)
);

create table if not exists compilations_events
(
    compilation_id bigint not null,
    event_id bigint not null,
    constraint pk_compilations_events primary key (compilation_id, event_id),
    constraint fk_compilations foreign key (compilation_id) references compilations (id),
    constraint fk_events foreign key (event_id) references events (id)
)