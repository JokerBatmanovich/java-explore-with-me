{
	"info": {
		"_postman_id": "718a9d2e-c9aa-4a0e-b221-164f22ac4c46",
		"name": "3-й этап ДП. \"Comments\" feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27482145"
	},
	"item": [
		{
			"name": "Comments",
			"item": [
				{
					"name": "Добавление нового пользователя 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' пользователя должно равняться '1'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');    \r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"user1\",\r\n    \"email\": \"user1@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление новой категории 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' категории должно равняться '1'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');    \r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Category1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/categories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового события 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' события должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');    \r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'confirmedRequests' события должно равняться 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('confirmedRequests');    \r",
									"    pm.expect(jsonData.confirmedRequests, '\"confirmedRequests\" must be 0').to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'category.id' события должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('category');    \r",
									"    pm.expect(jsonData.category.id, '\"category.id\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'initiator.id' события должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('initiator');    \r",
									"    pm.expect(jsonData.initiator.id, '\"initiator.id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Поле 'state' события должно равняться PENDING\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('state');    \r",
									"    pm.expect(jsonData.state, '\"state\" must be PENDING').to.eql('PENDING');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"annotation\": \"Event1 annotation annotation annotation\",\r\n    \"category\": 1,\r\n    \"description\":\"Event1 description description description\",\r\n    \"eventDate\": \"2025-01-20 07:13:48\",\r\n    \"location\": {\r\n        \"lat\": 5.7209,\r\n        \"lon\": -75.7611\r\n    },\r\n    \"paid\": \"false\",\r\n    \"participantLimit\": \"55\",\r\n    \"requestModeration\": \"true\",\r\n    \"title\": \"Event1 Title\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Опубликовать событие 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' события должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');    \r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'state' события должно равняться PUBLISHED\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('state');    \r",
									"    pm.expect(jsonData.state, '\"state\" must be PUBLISHED').to.eql(\"PUBLISHED\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/events/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового комментария 1 от пользователя 1 к событию 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' комментария должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');    \r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'text' комментария должно равняться заданному\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('text');    \r",
									"    pm.expect(jsonData.text, '\"text\" must be \"Комментарий к событию 1 от пользователя 1\"').to.eql('Комментарий к событию 1 от пользователя 1');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'commentator.id' комментария должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('commentator');    \r",
									"    pm.expect(jsonData.commentator.id, '\"commentator.id\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'eventId' комментария должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('eventId');    \r",
									"    pm.expect(jsonData.eventId, '\"eventId\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'replyTo' комментария должно равняться null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('replyTo');    \r",
									"    pm.expect(jsonData.replyTo, '\"replyTo\" must be null').to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'commentType' комментария должно равняться POSITIVE\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('commentType');    \r",
									"    pm.expect(jsonData.commentType, '\"commentType\" must be POSITIVE').to.eql(\"POSITIVE\");\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'createdOn' комментария не должно равнять null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('createdOn');    \r",
									"    pm.expect(jsonData.createdOn, '\"createdOn\" must be not null').to.not.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Комментарий к событию 1 от пользователя 1\",\r\n    \"commentType\": \"POSITIVE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/events/1/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"events",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "replyTo",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментария 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' комментария должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');    \r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'text' комментария должно равняться заданному\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('text');    \r",
									"    pm.expect(jsonData.text, '\"text\" must be \"Комментарий к событию 1 от пользователя 1\"').to.eql('Комментарий к событию 1 от пользователя 1');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'commentator.id' комментария должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('commentator');    \r",
									"    pm.expect(jsonData.commentator.id, '\"commentator.id\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'eventId' комментария должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('eventId');    \r",
									"    pm.expect(jsonData.eventId, '\"eventId\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'replyTo' комментария должно равняться null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('replyTo');    \r",
									"    pm.expect(jsonData.replyTo, '\"replyTo\" must be null').to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'commentType' комментария должно равняться POSITIVE\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('commentType');    \r",
									"    pm.expect(jsonData.commentType, '\"commentType\" must be POSITIVE').to.eql(\"POSITIVE\");\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'createdOn' комментария не должно равнять null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('createdOn');    \r",
									"    pm.expect(jsonData.createdOn, '\"createdOn\" must be not null').to.not.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								"1"
							],
							"query": [
								{
									"key": "replyTo",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновить текст комментария 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' комментария должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');    \r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'text' комментария должно равняться заданному\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('text');    \r",
									"    pm.expect(jsonData.text, '\"text\" must be \"Обновленный комментарий событию 1 от пользователя 1\"').to.eql('Обновленный комментарий событию 1 от пользователя 1');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'commentator.id' комментария должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('commentator');    \r",
									"    pm.expect(jsonData.commentator.id, '\"commentator.id\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'eventId' комментария должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('eventId');    \r",
									"    pm.expect(jsonData.eventId, '\"eventId\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'replyTo' комментария должно равняться null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('replyTo');    \r",
									"    pm.expect(jsonData.replyTo, '\"replyTo\" must be null').to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'commentType' комментария должно равняться POSITIVE\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('commentType');    \r",
									"    pm.expect(jsonData.commentType, '\"commentType\" must be POSITIVE').to.eql(\"POSITIVE\");\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'createdOn' комментария должно присутствовать\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('createdOn');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Обновленный комментарий событию 1 от пользователя 1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"1"
							],
							"query": [
								{
									"key": "replyTo",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновить тип комментария 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' комментария должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');    \r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'text' комментария должно равняться заданному\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('text');    \r",
									"    pm.expect(jsonData.text, '\"text\" must be \"Обновленный комментарий событию 1 от пользователя 1\"').to.eql('Обновленный комментарий событию 1 от пользователя 1');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'commentator.id' комментария должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('commentator');    \r",
									"    pm.expect(jsonData.commentator.id, '\"commentator.id\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'eventId' комментария должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('eventId');    \r",
									"    pm.expect(jsonData.eventId, '\"eventId\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'replyTo' комментария должно равняться null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('replyTo');    \r",
									"    pm.expect(jsonData.replyTo, '\"replyTo\" must be null').to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'commentType' комментария должно равняться NEUTRAL\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('commentType');    \r",
									"    pm.expect(jsonData.commentType, '\"commentType\" must be NEUTRAL').to.eql(\"NEUTRAL\");\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'createdOn' комментария должно присутствовать\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('createdOn');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"commentType\": \"NEUTRAL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"1"
							],
							"query": [
								{
									"key": "replyTo",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового комментария от пользователя 1 событию 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' комментария должно равняться 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');    \r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'text' комментария должно равняться заданному\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('text');    \r",
									"    pm.expect(jsonData.text, '\"text\" must be \"Комментарий2 к событию 1 от пользователя 1\"').to.eql('Комментарий2 к событию 1 от пользователя 1');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'commentator.id' комментария должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('commentator');    \r",
									"    pm.expect(jsonData.commentator.id, '\"commentator.id\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'eventId' комментария должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('eventId');    \r",
									"    pm.expect(jsonData.eventId, '\"eventId\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'replyTo' комментария должно равняться null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('replyTo');    \r",
									"    pm.expect(jsonData.replyTo, '\"replyTo\" must be null').to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'commentType' комментария должно равняться NEGATIVE\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('commentType');    \r",
									"    pm.expect(jsonData.commentType, '\"commentType\" must be NEGATIVE').to.eql(\"NEGATIVE\");\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'createdOn' комментария должно присутствовать\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('createdOn');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Комментарий2 к событию 1 от пользователя 1\",\r\n    \"commentType\": \"NEGATIVE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/events/1/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"events",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "replyTo",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка комментариев события 1 c параметрами",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;  \r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен быть списком\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле comment[0] 'id'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле comment[1] 'id'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/events/1/comments?sort=CREATED_ON_ASC&rangeStart=2020-10-10 10:10:10&rangeEnd=2090-10-10 10:10:10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "sort",
									"value": "CREATED_ON_ASC"
								},
								{
									"key": "rangeStart",
									"value": "2020-10-10 10:10:10"
								},
								{
									"key": "rangeEnd",
									"value": "2090-10-10 10:10:10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка комментариев события 1 c size = 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;  \r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен быть списком\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле comment[0] 'id'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/events/1/comments?size=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "sort",
									"value": "CREATED_ON_ASC",
									"disabled": true
								},
								{
									"key": "rangeStart",
									"value": "2020-10-10 10:10:10",
									"disabled": true
								},
								{
									"key": "rangeEnd",
									"value": "2090-10-10 10:10:10",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка комментариев события 1 c sort=CREATED_ON_DESC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;  \r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен быть списком\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле comment[0] 'id'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле comment[1] 'id'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/events/1/comments?sort=CREATED_ON_DESC",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "sort",
									"value": "CREATED_ON_DESC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка комментариев события 1 c rangeStart=2025-01-01 10:00:00",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;  \r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен быть пустым списком\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/events/1/comments?rangeStart=2025-01-01 10:00:00",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "sort",
									"value": "CREATED_ON_DESC",
									"disabled": true
								},
								{
									"key": "rangeStart",
									"value": "2025-01-01 10:00:00"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка комментариев события 1 c rangeEnd=2000-01-01 10:00:00",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;  \r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен быть пустым списком\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/events/1/comments?rangeEnd=2000-01-01 10:00:00",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "sort",
									"value": "CREATED_ON_DESC",
									"disabled": true
								},
								{
									"key": "rangeEnd",
									"value": "2000-01-01 10:00:00"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария 1 пользователем 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);  \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"1"
							],
							"query": [
								{
									"key": "sort",
									"value": "CREATED_ON_DESC",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение удаленного комментария 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								"1"
							],
							"query": [
								{
									"key": "replyTo",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка  своих комментариев пользователем 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;  \r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен быть пустым списком\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 0').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле comment[0] 'id' должно быть равно 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "sort",
									"value": "CREATED_ON_DESC",
									"disabled": true
								},
								{
									"key": "rangeEnd",
									"value": "2000-01-01 10:00:00",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового пользователя 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' пользователя должно равняться '2'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');    \r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"user2\",\r\n    \"email\": \"user2@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового комментария от пользователя 2 событию 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' комментария должно равняться 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');    \r",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'text' комментария должно равняться заданному\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('text');    \r",
									"    pm.expect(jsonData.text, '\"text\" must be \"Комментарий3 к событию 1 от пользователя 2\"').to.eql('Комментарий3 к событию 1 от пользователя 2');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'commentator.id' комментария должно равняться 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('commentator');    \r",
									"    pm.expect(jsonData.commentator.id, '\"commentator.id\" must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'eventId' комментария должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('eventId');    \r",
									"    pm.expect(jsonData.eventId, '\"eventId\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'replyTo' комментария должно равняться null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('replyTo');    \r",
									"    pm.expect(jsonData.replyTo, '\"replyTo\" must be null').to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'commentType' комментария должно равняться NEGATIVE\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('commentType');    \r",
									"    pm.expect(jsonData.commentType, '\"commentType\" must be NEGATIVE').to.eql(\"NEGATIVE\");\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'createdOn' комментария должно присутствовать\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('createdOn');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Комментарий3 к событию 1 от пользователя 2\",\r\n    \"commentType\": \"NEGATIVE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/events/1/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"events",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "replyTo",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение админом списка комментариев пользователя 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;  \r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен быть списком\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле comment[0] 'id' должно быть равно 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/users/2/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users",
								"2",
								"comments"
							],
							"query": [
								{
									"key": "sort",
									"value": "CREATED_ON_ASC",
									"disabled": true
								},
								{
									"key": "rangeStart",
									"value": "2020-10-10 10:10:10",
									"disabled": true
								},
								{
									"key": "rangeEnd",
									"value": "2090-10-10 10:10:10",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Replies",
			"item": [
				{
					"name": "Добавление пользователя 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' пользователя должно равняться '3'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');    \r",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"user3\",\r\n    \"email\": \"user3@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ответ на комментарий 2 пользователем 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' пользователя должно равняться '4'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');    \r",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'text' комментария должно равняться заданному\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('text');    \r",
									"    pm.expect(jsonData.text, '\"text\" must be \"Ответ3 на К2 от П1\"').to.eql(\"Ответ3 на К2 от П1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'commentator.id' комментария должно '3'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('commentator');    \r",
									"    pm.expect(jsonData.commentator.id, '\"commentator.id\" must be 3').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'replyTo.id' комментария должно равняться'2'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('replyTo');    \r",
									"    pm.expect(jsonData.replyTo.id, '\"replyTo.id\" must be 2').to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Ответ3 на К2 от П1\",\r\n    \"commentType\": \"POSITIVE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/3/events/1/comments?replyTo=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"3",
								"events",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "replyTo",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового события 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' события должно равняться 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');    \r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'confirmedRequests' события должно равняться 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('confirmedRequests');    \r",
									"    pm.expect(jsonData.confirmedRequests, '\"confirmedRequests\" must be 0').to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'category.id' события должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('category');    \r",
									"    pm.expect(jsonData.category.id, '\"category.id\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'initiator.id' события должно равняться 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('initiator');    \r",
									"    pm.expect(jsonData.initiator.id, '\"initiator.id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Поле 'state' события должно равняться PENDING\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('state');    \r",
									"    pm.expect(jsonData.state, '\"state\" must be PENDING').to.eql('PENDING');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"annotation\": \"Event2 annotation annotation annotation\",\r\n    \"category\": 1,\r\n    \"description\":\"Event2 description description description\",\r\n    \"eventDate\": \"2025-01-20 07:13:48\",\r\n    \"location\": {\r\n        \"lat\": 5.7209,\r\n        \"lon\": -75.7611\r\n    },\r\n    \"paid\": \"false\",\r\n    \"participantLimit\": \"55\",\r\n    \"requestModeration\": \"true\",\r\n    \"title\": \"Event2 Title\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Опубликовать событие 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' события должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');    \r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'state' события должно равняться PUBLISHED\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('state');    \r",
									"    pm.expect(jsonData.state, '\"state\" must be PUBLISHED').to.eql(\"PUBLISHED\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/events/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ответ на комментарий 2, который не относится к событию 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Комментарий\",\r\n    \"commentType\": \"POSITIVE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/3/events/2/comments?replyTo=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"3",
								"events",
								"2",
								"comments"
							],
							"query": [
								{
									"key": "replyTo",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария 2 админом",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);  \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Комментарий 4 должен остаться с replyTo=null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' комментария должно равняться 4\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');    \r",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'text' комментария должно равняться заданному\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('text');    \r",
									"    pm.expect(jsonData.text, '\"text\" must be \"Ответ3 на К2 от П1\"').to.eql('Ответ3 на К2 от П1');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'replyTo' комментария должно равняться null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('replyTo');    \r",
									"    pm.expect(jsonData.replyTo, '\"replyTo\" must be null').to.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/comments/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								"4"
							],
							"query": [
								{
									"key": "replyTo",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Rates",
			"item": [
				{
					"name": "Пользователь 1 негативно оценивает комментарий 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/1/comments/4/rate?isPositive=false",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"4",
								"rate"
							],
							"query": [
								{
									"key": "isPositive",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Рейтинг комментария 4 должен быть -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' комментария должно равняться 4\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');    \r",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'rating' комментария должно равняться -1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('rating');    \r",
									"    pm.expect(jsonData.rating, '\"rating\" must be -1').to.eql(-1);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/comments/4/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								"4",
								""
							],
							"query": [
								{
									"key": "replyTo",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Пользователь 1 меняет оценку на положительную",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/1/comments/4/rate?isPositive=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"4",
								"rate"
							],
							"query": [
								{
									"key": "isPositive",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Рейтинг комментария 4 должен быть 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' комментария должно равняться 4\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');    \r",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'rating' комментария должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('rating');    \r",
									"    pm.expect(jsonData.rating, '\"rating\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/comments/4/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								"4",
								""
							],
							"query": [
								{
									"key": "replyTo",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка комментариев события 1 c sort=RATING",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;  \r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен быть списком\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле comment[0] 'id' должно быть равно 4\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 4').to.eql(4);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле comment[1] 'id' должно быть равно 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1].id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/events/1/comments?sort=RATING",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "sort",
									"value": "RATING"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Пользователь 1 убирает оценку комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/1/comments/4/rate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"4",
								"rate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Рейтинг комментария 4 должен быть 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' комментария должно равняться 4\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');    \r",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'rating' комментария должно равняться 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('rating');    \r",
									"    pm.expect(jsonData.rating, '\"rating\" must be 0').to.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/comments/4/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								"4",
								""
							],
							"query": [
								{
									"key": "replyTo",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Exceptions",
			"item": [
				{
					"name": "Добавление нового комментария к несуществующему событию.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Комментарий к событию 99 от пользователя 1\",\r\n    \"commentType\": \"NEUTRAL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/events/99/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"events",
								"99",
								"comments"
							],
							"query": [
								{
									"key": "replyTo",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового комментария от несуществующего пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Комментарий к событию 1 от пользователя 99\",\r\n    \"commentType\": \"NEUTRAL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/99/events/1/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"99",
								"events",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "replyTo",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового события 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' события должно равняться 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');    \r",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'category.id' события должно равняться 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('category');    \r",
									"    pm.expect(jsonData.category.id, '\"category.id\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'initiator.id' события должно равняться 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('initiator');    \r",
									"    pm.expect(jsonData.initiator.id, '\"initiator.id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Поле 'state' события должно равняться PENDING\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('state');    \r",
									"    pm.expect(jsonData.state, '\"state\" must be PENDING').to.eql('PENDING');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"annotation\": \"Event3 annotation annotation annotation\",\r\n    \"category\": 1,\r\n    \"description\":\"Event3 description description description\",\r\n    \"eventDate\": \"2025-01-20 07:13:48\",\r\n    \"location\": {\r\n        \"lat\": 5.7209,\r\n        \"lon\": -75.7611\r\n    },\r\n    \"paid\": \"false\",\r\n    \"participantLimit\": \"55\",\r\n    \"requestModeration\": \"true\",\r\n    \"title\": \"Event3 Title\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового комментария к неопубликованному событию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Комментарий к событию 1 от пользователя 1\",\r\n    \"commentType\": \"POSITIVE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/events/3/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"events",
								"3",
								"comments"
							],
							"query": [
								{
									"key": "replyTo",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев несуществующего события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/events/100/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"100",
								"comments"
							],
							"query": [
								{
									"key": "replyTo",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение несуществующего комментария 99",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/comments/99",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								"99"
							],
							"query": [
								{
									"key": "replyTo",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка комментариев события 1 c sort=123abc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/events/1/comments?sort=123abc",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "sort",
									"value": "123abc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка комментариев события 1 c rangeStart=2025-01-01T10:00:00",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/events/1/comments?rangeStart=2025-01-01T10:00:00",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "sort",
									"value": "CREATED_ON_DESC",
									"disabled": true
								},
								{
									"key": "rangeStart",
									"value": "2025-01-01T10:00:00"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка комментариев c rangeStart после rangeEnd",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/events/1/comments?rangeStart=2025-01-01 10:00:00&rangeEnd=2015-01-01 10:00:00",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "sort",
									"value": "CREATED_ON_DESC",
									"disabled": true
								},
								{
									"key": "rangeStart",
									"value": "2025-01-01 10:00:00"
								},
								{
									"key": "rangeEnd",
									"value": "2015-01-01 10:00:00"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка комментариев события 1 c size = -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/events/1/comments?size=-1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "sort",
									"value": "CREATED_ON_ASC",
									"disabled": true
								},
								{
									"key": "rangeStart",
									"value": "2020-10-10 10:10:10",
									"disabled": true
								},
								{
									"key": "rangeEnd",
									"value": "2090-10-10 10:10:10",
									"disabled": true
								},
								{
									"key": "size",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновить текст комментария 3 пользователем 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Обновленный комментарий\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"3"
							],
							"query": [
								{
									"key": "replyTo",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удалить комментарий 3 пользователем 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Обновленный комментарий\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"3"
							],
							"query": [
								{
									"key": "replyTo",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Пользователь 2 ставит оценку своему комментарию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/2/comments/3/rate?isPositive=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"3",
								"rate"
							],
							"query": [
								{
									"key": "isPositive",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Пользователь 1 убирает оценку комментария Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/1/comments/4/rate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"4",
								"rate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Пользователь 1 меняет оценку на положительную",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/1/comments/4/rate?isPositive=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"4",
								"rate"
							],
							"query": [
								{
									"key": "isPositive",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Пользователь 1 снова ставит положительную оценку",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/1/comments/4/rate?isPositive=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"4",
								"rate"
							],
							"query": [
								{
									"key": "isPositive",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}